**********************************************************************************************************
****************************IMPORT DB (copy paste the entire list of commands)**************************** 
**********************************************************************************************************
//carica case
LOAD CSV FROM "file:///homes.csv" AS column
WITH column[0] as id, column[1] as address, column[2] as house_number, column[3] as cap where id<>"id"
MERGE (h:Home{home_id:toInteger(id),address:address,house_number:house_number,cap:cap});

//carica gli utenti e collega le case dal csv
LOAD CSV FROM "file:///people.csv" AS column
with column[0] as surname, column[1] as name,column[2] as birthdate , column[3] as cf,column[4] as home  where surname<>"surname"
merge (p:Person{cf:cf,birthdate:birthdate,surname:surname, name:name})
with home as home, p as p
match (f:Home{home_id:toInteger(home)})
merge (p)-[:LIVES_IN]->(f);

//carica i public place (se un public place non ha il civico lo ignora)
LOAD CSV FROM "file:///public_places.csv" AS column
with column[0] as name, column[1] as type,column[2] as address , column[4] as cap, column[3] as civicn, column[5] as city,column[6] as id  where name<>"Name"
foreach (n in (case when civicn is not null then[1] else [] end) |  merge (pp:PublicPlace{id:toInteger(id),name:name,type:type,    address:address, cap:cap,civic_number:civicn,city:city})
)
foreach (n in (case when civicn is  null then[1] else [] end) |  merge (pp:PublicPlace{id:toInteger(id),name:name,type:type,    address:address, cap:cap,city:city})
);

//crea i 4 vaccini
CREATE (v:Vaccine {type: "Pfizer-BioNTech"})
CREATE (k:Vaccine {type: "AstraZeneca"})
CREATE (m:Vaccine {type: "Johnson & Johnson"})
CREATE (n:Vaccine {type: "Moderna"});

//carica il collegamento tra vaccini e persone
LOAD CSV FROM "file:///vaccines.csv" AS column
WITH column[0] as cf, column[1] as type, column[2] as datetime where cf<>"codice_fiscale"
MATCH (p:Person{cf:cf}) 
WITH type,p,datetime
MATCH (v:Vaccine{type:type})
CREATE (p)-[r:GOT{datetime:datetime(datetime)}]->(v);

//crea i test
CREATE (t:Test{type: "Molecular"})
CREATE (k:Test{type: "Antigen"});

//carica il collegamento tra test e persone
LOAD CSV FROM "file:///tests.csv" AS column
WITH column[0] as cf, column[1] as type, column[2] as result, column[3] as datetime
MATCH (p:Person{cf:cf})
WITH type,result,datetime,p
MATCH(t:Test{type:type})
CREATE (p)-[r:GOT_TESTED{result:result, datetime:datetime(datetime)}]->(t);

//carica gli incontri tra persone
LOAD CSV FROM "file:///meetings.csv" AS column
WITH split(column[0]," ")[0] as latitude,split(column[0]," ")[1] as longitude, column[1] as timestamp, column[2] as cf1, column[3] as cf2 where timestamp<>"timestamp_1"
MATCH (p:Person{cf:cf1})
with p,timestamp,latitude,longitude,cf2
match(k:Person{cf:cf2})
with p,timestamp,latitude,longitude,k
CREATE (p)-[r:MET{timestamp:datetime(timestamp), latitude:latitude, longitude:longitude}]->(k);

//carica le visite ai public place
LOAD CSV FROM "file:///public_visits.csv" AS column
WITH column[0] as cf, column[1] as id_place, column[2] as date_in, column[3] as date_out
MATCH (p:Person{cf:cf})
WITH id_place,date_in,date_out,p
MATCH(k:PublicPlace{id:toInteger(id_place)})
CREATE (p)-[r:WENT_TO{date_in:datetime(date_in), date_out:datetime(date_out)}]->(k);